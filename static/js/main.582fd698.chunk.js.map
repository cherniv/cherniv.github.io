{"version":3,"sources":["store.js","PrescriptionForm.js","App.js","serviceWorker.js","index.js"],"names":["reducer","combineReducers","form","reduxFormReducer","store","window","devToolsExtension","createStore","required","value","undefined","reduxForm","initialValues","APIKey","PharmacyNumber","transaction_id","dob","transaction_date","Date","toLocaleDateString","transaction_time","toLocaleTimeString","patient_id","getTime","is_active","gender","rx_number","insurance_plans","ins_seq_no","ins_name","ins_code","middle_name","drug_name","patient_amount_due","rx_serial_number","props","handleSubmit","pristine","reset","submitting","onSubmit","className","Field","name","component","disabled","validate","type","class","onClick","submit","data","fetch","api","method","headers","body","JSON","stringify","App","alt","src","width","height","sizes","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.582fd698.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\nimport { reducer as reduxFormReducer } from 'redux-form';\n\nconst reducer = combineReducers({\n  form: reduxFormReducer,\n});\nconst store = (window.devToolsExtension\n  ? window.devToolsExtension()(createStore)\n  : createStore)(reducer);\n\nexport default store;","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nconst required = value => value ? undefined : 'Required'\n\nconst SimpleForm = props => {\n  const { handleSubmit, pristine, reset, submitting } = props;\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Prescription Update Api</h2>\n\n      <div className=\"form-group\">\n        <label>APIKey</label>\n        <div>\n          <Field\n            name=\"APIKey\"\n            component=\"input\"\n            className=\"form-control\"\n            disabled\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>PharmacyNumber</label>\n        <div>\n          <Field\n            name=\"PharmacyNumber\"\n            component=\"input\"\n            className=\"form-control\"\n            disabled\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>transaction_id</label>\n        <div>\n          <Field\n            name=\"transaction_id\"\n            component=\"input\"\n            className=\"form-control required\"\n            validate={[ required ]}\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>rx_number</label>\n        <div>\n          <Field\n            name=\"rx_number\"\n            component=\"input\"\n            className=\"form-control\"\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>patient_id</label>\n        <div>\n          <Field\n            name=\"patient_id\"\n            component=\"input\"\n            className=\"form-control\"\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>transaction_date</label>\n        <div>\n          <Field\n            name=\"transaction_date\"\n            component=\"input\"\n            className=\"form-control\"\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>transaction_time</label>\n        <div>\n          <Field\n            name=\"transaction_time\"\n            component=\"input\"\n            className=\"form-control\"\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>rx_serial_number</label>\n        <div>\n          <Field\n            name=\"rx_serial_number\"\n            component=\"input\"\n            className=\"form-control\"\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>drug_name</label>\n        <div>\n          <Field\n            name=\"drug_name\"\n            component=\"input\"\n            className=\"form-control\"\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label>patient_amount_due</label>\n        <div>\n          <Field\n            name=\"patient_amount_due\"\n            component=\"input\"\n            className=\"form-control\"\n          />\n        </div>\n      </div>\n      \n      \n      <div className=\"form-group\">\n        <button type=\"submit\" class=\"btn btn-primary\" disabled={submitting} >Submit</button>\n        {' '}\n        <button type=\"button\" class=\"btn btn-secondary\" disabled={pristine || submitting} onClick={reset}>\n          Clear Values\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  initialValues: {\n    APIKey: 'APIKey',\n    PharmacyNumber: 'PharmacyNumber',\n    transaction_id: '888042020191211',\n    dob: \"1980-01-01\",\n    transaction_date: (new Date()).toLocaleDateString(),\n    transaction_time: (new Date()).toLocaleTimeString(),\n    patient_id: (new Date()).getTime(),\n    is_active: true,\n    gender: 'M',\n    rx_number: '12345',\n    insurance_plans: [{\n      ins_seq_no: 111,\n      ins_name: 'Plan',\n      ins_code: 'Code'\n    }],\n    middle_name: 'Middle Name',\n    drug_name: 'Advil',\n    patient_amount_due: \"10\",\n    rx_serial_number: '1234567890'\n  },\n  form: 'simple', // a unique identifier for this form\n})(SimpleForm);","import React from 'react'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport SimpleForm from './PrescriptionForm'\n\n//var api = 'http://localhost:5000/pills-757d2/us-central1/api';\nvar api = \"https://us-central1-pills-757d2.cloudfunctions.net/api\";\n\nfunction submit(data) {\n  //console.log('SUBMIT DATA', data)\n  var endpoint = 'prescriptions';\n  fetch(api + '/bestrxp/' + endpoint, {\n    method: 'post',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n}\n\nconst App = () =>\n  <Provider store={store}>\n    <div className=\"container\">\n    <img \n      className=\"logo\" alt=\"BestRx\"\n      src=\"https://www.bestrx.com/wp-content/uploads/2019/10/logo-small-new.png\" \n      width=\"320\" height=\"106\" sizes=\"320px\" \n    />\n    <SimpleForm \n        onSubmit={submit} \n    />\n    </div>\n  </Provider>;\n\n  export default  App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}